<?php
namespace UCBRecommendBase;

if ( !defined( 'UCB_RECOMMEND_PLUGIN' ) )
	exit;

abstract class UCBRecommend_Base_Class
{

	private static $settings = array(
		"exclude_loggedin_user" => array( "label" => "Whether to exclude logged in user", "type" => "bool", "default" => UCB_RECOMMEND_EXCLUDE_LOGGEDIN_USER ),
		//		"update_cookie_expire" => array( "label" => "Whether to update cookie expiration when accessed or not", "type" => "bool", "default" => UCB_RECOMMEND_UPDATE_COOKIE_EXPIRE ),
		//		"user_expire" => array( "label" => "Expiration of user's cookie", "type" => "int", "default" => UCB_RECOMMEND_USER_EXPIRE, "min" => 0 ),
		//		"sampling_rate" => array( "label" => "Sampling rate", "type" => "float", "default" => UCB_RECOMMEND_SAMPLING_RATE, "min" => 0, "max" => 1, "option" => "sampling_rate", "option_default" => UCB_RECOMMEND_DEFAULT_SAMPLING_RATE ),
		//		"check_data" => array( "label" => "Whether to validate cookie data or not", "type" => "bool", "default" => UCB_RECOMMEND_CHECK_DATA ),
		//		"nonce_check" => array( "label" => "Whether to check nonce or not", "type" => "bool", "default" => UCB_RECOMMEND_NONCE_CHECK ),
		//		"calc_interval" => array( "label" => "Interval of calculate", "type" => "int", "default" => UCB_RECOMMEND_CALC_INTERVAL, "min" => MINUTE_IN_SECONDS ),
		//		"calc_timeout" => array( "label" => "Timeout of calculate", "type" => "int", "default" => UCB_RECOMMEND_CALC_TIMEOUT, "min" => MINUTE_IN_SECONDS ),
		//		"calc_log" => array( "label" => "Whether to log calculate process", "type" => "bool", "default" => UCB_RECOMMEND_CALC_LOG ),
		"clear_interval" => array( "label" => "Interval of clear test data", "type" => "int", "default" => UCB_RECOMMEND_CLEAR_INTERVAL, "min" => MINUTE_IN_SECONDS ),
		//		"clear_timeout" => array( "label" => "Timeout of clear test data", "type" => "int", "default" => UCB_RECOMMEND_CLEAR_TIMEOUT, "min" => MINUTE_IN_SECONDS ),
		"clear_log" => array( "label" => "Whether to log clear test data process", "type" => "bool", "default" => UCB_RECOMMEND_CLEAR_LOG ),
		"data_expire" => array( "label" => "Expiration of test data", "type" => "int", "default" => UCB_RECOMMEND_DATA_EXPIRE, "min" => MINUTE_IN_SECONDS ),
		"display_log_number" => array( "label" => "Number to display log", "type" => "int", "default" => UCB_RECOMMEND_DISPLAY_LOG_NUMBER, "min" => 0 ),
		"minify_js" => array( "label" => "Whether to minify js that generated by this plugin", "type" => "bool", "default" => UCB_RECOMMEND_MINIFY_JS ),
		"minify_css" => array( "label" => "Whether to minify css that generated by this plugin", "type" => "bool", "default" => UCB_RECOMMEND_MINIFY_CSS ),
		//		"jaccard_threshold" => array( "label" => "Threshold of jaccard to get results, which is used when argument is not supplied to function", "type" => "float", "default" => UCB_RECOMMEND_JACCARD_THRESHOLD, "min" => 0, "max" => 1 ),
		//		"jaccard_min_number" => array( "label" => "Min data number to be required to get results, which is used when argument is not supplied to function", "type" => "int", "default" => UCB_RECOMMEND_JACCARD_MIN_NUMBER, "min" => 0 ),
		//		"calculate_number" => array( "label" => "Max number of calculations of per", "type" => "int", "default" => UCB_RECOMMEND_CALCULATE_NUMBER, "min" => 10 ),
		//		"show_result" => array( "label" => "Whether to set button to show result", "type" => "bool", "default" => UCB_RECOMMEND_SHOW_RESULT ),
		"ucb_const" => array( "label" => "Constant of UCB Algorithm", "type" => "int", "default" => UCB_RECOMMEND_UCB_CONST, "min" => 0 ),
		"std_dev" => array( "label" => "Standard Deviation to use calculate score from ucb score", "type" => "float", "default" => UCB_RECOMMEND_BANDIT_RANDOM_STD_DEV, "min" => 0 ),
		"front_admin_ajax" => array( "label" => "Whether to use admin-ajax.php on front page", "type" => "bool", "default" => UCB_RECOMMEND_FRONT_ADMIN_AJAX ),
		"check_referer" => array( "label" => "Whether to check referer when ajax access without nonce check", "type" => "bool", "default" => UCB_RECOMMEND_CHECK_REFERER ),
		"test" => array( "label" => "Whether to show test button", "type" => "bool", "default" => UCB_RECOMMEND_TEST ),
		"consider_page_cache" => array( "label" => "Whether to consider page cache", "type" => "bool", "default" => UCB_RECOMMEND_CONSIDER_PAGE_CACHE ),
		"check_update" => array( "label" => "Whether to check develop update", "type" => "bool", "default" => UCB_RECOMMEND_CHECK_UPDATE ),
	);

	protected function get_filter_prefix()
	{
		return 'ucbr_';
	}

	protected function apply_filters()
	{
		$args = func_get_args();
		$key = $args[0];
		$args[0] = $this->get_filter_prefix() . $key;

		if ( key_exists( $key, self::$settings ) ) {
			global $ucbr_option;
			$default = call_user_func_array( 'apply_filters', $args );
			$ret = $ucbr_option->get( $args[0] );
			if ( "" === $ret ) {
				$ret = $default;
			}
			switch ( self::$settings[$key]["type"] ) {
				case "bool":
					if ( is_bool( $ret ) ) {
						return $ret;
					}
					if ( "true" === $ret ) {
						return true;
					}
					if ( "false" === $ret ) {
						return false;
					}
					$ret = $default;
					break;
				case "int":
					$default = (int)$default;
					if ( is_numeric( $ret ) ) {
						$ret = (int)$ret;
						if ( $ret !== $default ) {
							if ( isset( self::$settings[$key]["min"] ) && $ret < (int)self::$settings[$key]["min"] ) {
								$ret = (int)self::$settings[$key]["min"];
							}
							if ( isset( self::$settings[$key]["max"] ) && $ret > (int)self::$settings[$key]["max"] ) {
								$ret = (int)self::$settings[$key]["max"];
							}
						} elseif ( isset( self::$settings[$key]["option"] ) ) {
							$default = isset( self::$settings[$key]["option_default"] ) ? (int)self::$settings[$key]["option_default"] : $default;
							$ret = (int)$ucbr_option->get( self::$settings[$key]["option"], $default );
						}
					} else {
						$ret = $default;
					}
					break;
				case "float":
					$default = (float)$default;
					if ( is_numeric( $ret ) ) {
						$ret = (float)$ret;
						if ( $ret !== $default ) {
							if ( isset( self::$settings[$key]["min"] ) && $ret < (float)self::$settings[$key]["min"] ) {
								$ret = (float)self::$settings[$key]["min"];
							}
							if ( isset( self::$settings[$key]["max"] ) && $ret > (float)self::$settings[$key]["max"] ) {
								$ret = (float)self::$settings[$key]["max"];
							}
						} elseif ( isset( self::$settings[$key]["option"] ) ) {
							$default = isset( self::$settings[$key]["option_default"] ) ? (float)self::$settings[$key]["option_default"] : $default;
							$ret = (float)$ucbr_option->get( self::$settings[$key]["option"], $default );
						}
					} else {
						$ret = $default;
					}
					break;
				default:
					break;
			}
			return $ret;
		}

		return call_user_func_array( 'apply_filters', $args );
	}

	protected function do_action()
	{
		$args = func_get_args();
		$args[0] = $this->get_filter_prefix() . $args[0];
		call_user_func_array( 'do_action', $args );
	}

	protected function get_settings()
	{
		return array_map( function ( $key, $value ) {
			global $ucbr_option;
			$value['key'] = $key;
			$value['name'] = $this->get_filter_prefix() . $key;
			$value['db'] = $ucbr_option->get( $value['name'] );
			$value['placeholder'] = $this->get_expression( $value['default'], $value['type'] );
			return $value;
		}, array_keys( self::$settings ), array_values( self::$settings ) );
	}

	protected function get_expression( $value, $type )
	{
		switch ( $type ) {
			case 'bool':
				return var_export( $value, true );
			case 'int':
				return $value;
			case 'float':
				return round( $value, 6 );
			default:
				return $value;
		}
	}

	protected function defined( $c )
	{
		if ( defined( $c ) ) {
			$const = @constant( $c );
			if ( $const )
				return true;
		}
		return false;
	}

	protected function definedv( $c, $default = NULL )
	{
		if ( defined( $c ) ) {
			$const = @constant( $c );
			return $const;
		}
		return $default;
	}

	protected function log( $message, $logfile = NULL, $error = false )
	{
		if ( !$this->defined( 'UCB_RECOMMEND_OUTPUT_LOG' ) )
			return false;
		if ( is_null( $logfile ) ) {
			$logfile = UCB_RECOMMEND_LOG_FILE;
		}

		$logdir = dirname( $logfile );
		if ( !file_exists( $logdir ) ) {
			@mkdir( $logdir, 0777, TRUE );
			@chmod( $logdir, 0777 );
		}

		@error_log( sprintf( "[%s] %s\n", date( 'Y-m-d H:i:s' ), $this->apply_filters( "log_message", is_string( $message ) ? $message : json_encode( $message ), $message ) ), 3, $logfile );
		if ( $error && $this->defined( 'UCB_RECOMMEND_SHOW_ERROR' ) )
			var_dump( nl2br( $message ) );
		return true;
	}

	protected function uuid()
	{
		//http://d.hatena.ne.jp/cakephper/20081218/1229544061
		$pid = getmypid();
		$node = $_SERVER['SERVER_ADDR'];
		list( $timeMid, $timeLow ) = explode( ' ', microtime() );
		return sprintf( "%08x%04x%04x%02x%02x%04x%08x", (int)$timeLow, (int)substr( $timeMid, 2 ) & 0xffff,
						mt_rand( 0, 0xfff ) | 0x4000, mt_rand( 0, 0x3f ) | 0x80, mt_rand( 0, 0xff ), $pid & 0xffff, $node );
	}

	protected function view( $name, $output = true, $args = array(), $lib = false )
	{
		extract( $args, EXTR_SKIP );
		ob_start();
		if ( $lib )
			@include( UCB_RECOMMEND_LIB_VIEWS_DIR . DIRECTORY_SEPARATOR . $name . ".php" );
		else
			@include( UCB_RECOMMEND_VIEWS_DIR . DIRECTORY_SEPARATOR . $name . ".php" );
		$view = ob_get_contents();
		ob_end_clean();
		if ( $output )
			echo $view;
		else
			return $view;
		return "";
	}

	protected function error( $error )
	{
		global $ucbr_controller;
		$ucbr_controller->add_error( $error );
	}

	protected function message( $message )
	{
		global $ucbr_controller;
		$ucbr_controller->add_message( $message );
	}

	protected function dir2path( $dir )
	{
		$dir = str_replace( UCB_RECOMMEND_ROOT_DIR, UCB_RECOMMEND_PLUGIN_URL, $dir );
		$dir = str_replace( DIRECTORY_SEPARATOR, "/", $dir );
		return $dir;
	}

	protected function path2dir( $path )
	{
		$path = str_replace( UCB_RECOMMEND_PLUGIN_URL, UCB_RECOMMEND_ROOT_DIR, $path );
		$path = str_replace( "/", DIRECTORY_SEPARATOR, $path );
		return $path;
	}

	protected function get_server_key()
	{
		global $ucbr_option;
		$ret = $ucbr_option->get( 'server_key' );
		if ( $ret ) {
			return $ret;
		}
		$ret = wp_generate_password( 64, true, true );
		$ucbr_option->set( 'server_key', $ret );
		return $ret;
	}

	protected function init_server_key()
	{
		global $ucbr_option;
		$ucbr_option->set( 'server_key', '' );
	}

	protected function get_algo()
	{
		return function_exists( 'hash' ) ? 'sha256' : 'sha1';
	}

	protected function get_hash( $data )
	{
		return hash_hmac( $this->get_algo(), $data, $this->get_server_key() );
	}

	protected function consider_page_cache()
	{
		return $this->apply_filters( 'consider_page_cache', COLLABORATIVE_FILTERING_CONSIDER_PAGE_CACHE );
	}

	protected static function generate_norm( $average = 0.0, $std_dev = 1.0 )
	{
		static $z1, $z2, $mt_max, $ready = true;
		if ( $mt_max === null ) {
			$mt_max = mt_getrandmax();
		}
		$ready = !$ready;
		if ( $ready ) {
			return $z2 * $std_dev + $average;
		}
		$u1 = mt_rand( 1, $mt_max - 1 ) / $mt_max;
		$u2 = mt_rand( 1, $mt_max - 1 ) / $mt_max;
		$v1 = sqrt( -2 * log( $u1 ) );
		$v2 = 2 * M_PI * $u2;
		$z1 = $v1 * cos( $v2 );
		$z2 = $v1 * sin( $v2 );
		return $z1 * $std_dev + $average;
	}
}
